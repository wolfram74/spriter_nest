== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

== Starting development server
instead of "rails s"
use "thin start --ssl" if https becomes a problem


==notes on imgur oauth (docs https://api.imgur.com/oauth2)

authorization URL
https://api.imgur.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&response_type=REQUESTED_RESPONSE_TYPE&state=APPLICATION_STATE

state variable useful for more specific redirects
response type is just going to be token, it's much more direct, pin leads to bad UX
client id is fairly straightforward.

png's up to 1meg in size will remain as png's and be lossless. Explore javascript manipulations and saving with pngs... this should continue to be the case well into the 400k pixel regime.

https://api.imgur.com/

== nested array to canvas
don't be a pillock, that's easy

== canvas to png
http://stackoverflow.com/questions/923885/capture-html-canvas-as-gif-jpg-png-pdf

== png to canvas
http://stackoverflow.com/questions/8751020/how-to-get-a-pixels-x-y-coordinate-color-from-an-image

== notes on implementation (t means test written, T means test passed)
users have many projects t
projects have many slides t
projects have default slide proportions t
projects have a color depth t
slides have X by Y nested arrays with RGBA vectors as values(default is 0's). t
slides belong to project t

project can generate a new blank slide T
project can generate a new slide copied from an old slide. T
project can select color for new pixels T
projects can select collections of frames to iterate over in animation mode T
projects can save to png and be stored in imgur
projects can load from imgur

slides respond to #setAt which sets at the x-y coordinate a new rgba value. t

== program flow
/ (unauthed) login with imgur
/ (authed) link to projects directory
/user/:id/projects list of projects
/user/:id/projects/:id project editing page

=== new users process
login with oauth
80k, 25k options

=== loading project flow
1. click image from index
2. load project info from server
  2a. build project.js object
    2a1. feed json into new Project method
    2a2. parse project particular information
    2a3. parse sprite atlas information, feed into New slide method
  2b. build dom elements.
3. store image properties in canvas

=== remaining tasks
*implement new slide button √
  -add button to canvas div
  -link new slide pad method to button
  -segue into append slide pad method
  -update slideIndex div
*implement copy slide button √
  -add button to canvas div
  -link copy slide pad method to button
    1. figure out new slides location
    2. send location information to server to retrieve slide id
    3. make slide with id, position data, dimensions and copy of cells array
  -segue into append slide pad method
  -update slideIndex div
*implement new project form
  -add form to projects index
  -create project with properties from form
*implement animation queue
  - populate queue from checkboxes in slideIndex
  - iterate through queue 30 times a second refreshing small canvas with it
*implement saving
  -assemble png from slides
    1. make blank canvas with dimensions 630 X 630
    2. set colors appropriately
  -post to imgur
    1. produce data for imgur upload
    2. get new ID
    3. send ID to server
  -update server
    1. save new ID
    2. respond with old ID
    3. delete old image.